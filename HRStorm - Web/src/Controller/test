<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Repository\PharmacieRepository;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Component\HttpFoundation\Request;
use App\Entity\Pharmacie;
use Symfony\Component\HttpFoundation\JsonResponse;



class PharmaciesController extends AbstractController
{
  
  #[Route('/pharmacies', name: 'app_pharmacies')]
  public function pharmacies(PharmacieRepository $pharmacieRepository ,SerializerInterface $serializer )
  {
      $pharmacies = $pharmacieRepository->findAll();
      //dump($medicaments);
      //die;
     // $medicamentsNormalises = $normalizer->normalize($medicaments,'json' ,['groups' =>"medicaments"]);
     //  $json = json_encode($medicamentsNormalises);
      $json = $serializer-> serialize($pharmacies, 'json' , ['groups' => "pharmacies"]);
     
      return new Response($json);

        }
  
        #[Route('/pharmacies/{id}', name: 'app_pharmacies_show')]
    public function pharmaciessid($id, NormalizerInterface $normalizer , PharmacieRepository $repo)
    {
      $pharmacies=$repo->find($id);
      $pharmaciesNormalises = $normalizer->normalize($pharmacies,'json' ,['groups' =>"pharmacies"]);
      return new Response(json_encode($pharmaciesNormalises));

  }
  #[Route('addpharmaciesJson/new', name: 'app_pharmacies_new',methods: ['POST'])]
  public function addpharmaciesJson(Request $req, NormalizerInterface $Normalizer)
  {
    $em = $this->getDoctrine()->getManager();
    $pharmacies = new Pharmacie();
    $pharmacies->setNom($req->get('Nom'));
    //dump($medicaments);
    //die();
    $pharmacies->setAdresse($req->get('Adresse'));
    $pharmacies->setTempo($req->get('Tempo'));
    $pharmacies->settempf($req->get('tempf'));

    $em->persist($pharmacies);
    $em->flush();
    $jsonContent = $Normalizer->normalize($pharmacies, 'json',['groups'=>'pharmacies']);
    return new Response(json_encode($jsonContent));
  }
  #[Route('updatepharmaciesJson/{id}', name: 'app_pharmacies_update')]
  public function updatepharmaciesJson(Request $req,$id,  NormalizerInterface $Normalizer  )
  {
    $em = $this->getDoctrine()->getManager();
    $pharmacies = $em->getRepository(Pharmacie::class)->find($id);
    $pharmacies->setAdresse($req->get('Adresse'));
    $pharmacies->setTempo($req->get('Tempo'));
    $pharmacies->settempf($req->get('tempf'));
    $em->persist($pharmacies);
    $em->flush();
    $jsonContent = $Normalizer->normalize($pharmacies, 'json',['groups'=>'pharmacies']);
    return new Response(json_encode($jsonContent));
  }
  #[Route('deletepharmaciesJson/{id}', name: 'app_pharmacies_delete')]
  public function deletepharmaciesJson(Request $req,$id,  NormalizerInterface $Normalizer)
  {
    $em = $this->getDoctrine()->getManager();
    $pharmacies = $em->getRepository(Pharmacie::class)->find($id);
    $em->remove($pharmacies);
    $em->flush();
    $jsonContent = $Normalizer->normalize($pharmacies, 'json',['groups'=>'pharmacies']);
    return new Response("ph suppri".json_encode($jsonContent));
  }
    
//****************************************************************************/
//Login

<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\ForgetPasswordType;
use App\Form\ModifierImageType;
use App\Form\ModifierProfileType;
use Doctrine\Common\Collections\Collection;
use App\Form\VerifierProfileType;
use App\Repository\UserRepository;
use Doctrine\ORM\Events;
use Doctrine\Persistence\ManagerRegistry;
use Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Component\Security\Http\LoginLink\LoginLinkHandlerInterface;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;

class SecurityController extends AbstractController
{
    private $passwordEncoder;
    private $jwtManager;

    public function __construct(
        UserPasswordEncoderInterface $passwordEncoder,
        JWTTokenManagerInterface $jwtManager
    ) {
        $this->passwordEncoder = $passwordEncoder;
        $this->jwtManager = $jwtManager;
    }
    #[Route(path: '/api/login', name: 'api_login')]
    public function loginapi(AuthenticationUtils $authenticationUtils,Request $request, TokenGeneratorInterface $tokenGenerator): Response
    {
        $email = $request->request->get('email');
        $password = $request->request->get('password');

        /** @var UserInterface $user */
        $user = $this->getDoctrine()
            ->getRepository(User::class)
            ->findOneBy(['email' => $email]);

        if (!$user) {
            throw new BadCredentialsException();
        }

        $isPasswordValid = $this->passwordEncoder->isPasswordValid($user, $password);

        if (!$isPasswordValid) {
            throw new BadCredentialsException();
        }
        $token = $tokenGenerator->generateToken();

        return new JsonResponse(['token' => $token]);
    }


    #[Route(path: '/login', name: 'login')]
    public function login(AuthenticationUtils $authenticationUtils): Response
    {

        // if ($this->getUser()) {
        //     return $this->redirectToRoute('target_path');
        // }
        // get the login error if there is one
        $error = $authenticationUtils->getLastAuthenticationError();
        // last username entered by the user
        $lastUsername = $authenticationUtils->getLastUsername();

        return $this->render('security/login.html.twig', ['last_username' => $lastUsername, 'error' => $error]);
    }

    #[Route(path: '/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
    #[Route(path: '/checkLogin', name: 'checkLogin')]
    public function login_check(UserRepository $userRepository ,LoginLinkHandlerInterface $loginLink,MailerInterface $mailer): Response
    {
        $users=$userRepository->findAll();
        foreach ($users as $user)
        {
            $LoginLinkDetails=$loginLink->createLoginLink($user);
            $email=(new \Symfony\Component\Mime\Email())
                ->from('muhamedabesy10@gmail.com')
                ->to($user->getEmail())
                ->subject('Login Check')
                ->text('verify link '.$LoginLinkDetails->getUrl());
            $mailer->send($email);

        }
        return new Response('checkLogin');
    }

    #[Route(path: '/forgetPassword', name: 'forgetPassword')]
    public function ForgetPassword(Request $request, UserRepository $user, MailerInterface $mailer, TokenGeneratorInterface $tokenGenerator): Response
    {

        $form = $this->createForm(ForgetPasswordType::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $donnees = $form->getData();
            $user = $user->findOneByEmail($donnees['email']);
            if ($user === null) {

                $this->addFlash('danger', 'Cette adresse e-mail est inconnue');
                return $this->redirectToRoute('login');
            }
            $token = $tokenGenerator->generateToken();

            try {
                $user->setResetToken($token);
                $entityManager = $this->getDoctrine()->getManager();
                $entityManager->persist($user);
                $entityManager->flush();
            } catch (\Exception $e) {
                $this->addFlash('warning', $e->getMessage());
                return $this->redirectToRoute('forgetPassword');
            }
            $url = $this->generateUrl('resetPassword', array('token' => $token), UrlGeneratorInterface::ABSOLUTE_URL);
            $email = (new Email())
                ->from('tnsharedinc@gmail.com')
                ->to($user->getEmail())
                ->html( "Bonjour,<br><br>Une demande de réinitialisation de mot de passe a été effectuée pour le site Nouvelle-Techno.fr. Veuillez cliquer sur le lien suivant : ".$url);

            $mailer->send($email);
            return $this->redirectToRoute('login');
        }
        return $this->render('Security/forgetPassword.html.twig',
            ['emailForm' => $form->createView()]);
    }

    #[Route('modifierProfile/{id}', name: 'modifierProfile')]
    public function modifierProfile(ManagerRegistry $doctrine,$id,Request $req): Response {


        $em = $doctrine->getManager();
        $user = $doctrine->getRepository(User::class)->find($id);
        $form = $this->createForm(ModifierProfileType::class,$user);
        $form->handleRequest($req);
        if($form->isSubmitted()){
            $em->persist($user);
            $em->flush();
            $roles=$user->getRoles();
            if(in_array('ROLE_MEDECIN', $roles)) {

                return $this->redirectToRoute('medecin');
            }
            if(in_array('ROLE_PATIENT', $roles)) {

                return $this->redirectToRoute('patient');
            }
        }

        return $this->renderForm('main/modifierProfile.html.twig',['form'=>$form]);

    }
    #[Route('modifierImage/{id}', name: 'modifierImage')]
    public function modifierImage(ManagerRegistry $doctrine,$id,Request $req,SluggerInterface $slugger,User $user,): Response {

        $form = $this->createForm(ModifierImageType::class,$user);


        $form->handleRequest($req);

        if ($form->isSubmitted() && $form->isValid()) {

            /** @var UploadedFile $eventImage */
            $eventImage = $form->get('image')->getData();

            // this condition is needed because the 'eventImage' field is not required
            // so the Image file must be processed only when a file is uploaded
            if ($eventImage) {
                $originalFilename = pathinfo($eventImage->getClientOriginalName(), PATHINFO_FILENAME);
                // this is needed to safely include the file name as part of the URL
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename . '-' . uniqid() . '.' . $eventImage->guessExtension();

                // Move the file to the directory where images are stored
                try {
                    $eventImage->move(
                        $this->getParameter('image_directory'),
                        $newFilename
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }

                // updates the 'eventImage' property to store the image file name
                // instead of its contents
                $user->setImage($newFilename);
            }
            $this->getDoctrine()->getManager()->flush();
            $roles=$user->getRoles();
            if(in_array('ROLE_MEDECIN', $roles)) {

                return $this->redirectToRoute('medecin', [], Response::HTTP_SEE_OTHER);
            }
            if(in_array('ROLE_PATIENT', $roles)) {

                return $this->redirectToRoute('patient', [], Response::HTTP_SEE_OTHER);
            }
        }
        return $this->renderForm('main/modifierImage.html.twig', [
            'user' => $user,
            'form' => $form,
        ]);



    }
    #[Route('verifierProfile/{id}', name: 'verifierProfile')]
    public function verifierProfile(ManagerRegistry $doctrine,$id,Request $req): Response {


        $em = $doctrine->getManager();
        $user = $doctrine->getRepository(User::class)->find($id);
        $form = $this->createForm(VerifierProfileType::class,$user);
        $form->handleRequest($req);
        if($form->isSubmitted()){
            $em->persist($user);
            $em->flush();
            $roles=$user->getRoles();

                return $this->redirectToRoute('medecin');


        }

        return $this->renderForm('main/verifierProfile.html.twig',['form'=>$form]);

    }
    #[Route('deleteAccount/{id}', name: 'deleteAccount')]
    public function deleteAccount(ManagerRegistry $doctrine,$id): Response
    {
        $em= $doctrine->getManager();
        $user= $doctrine->getRepository(User::class)->find($id);
        $em->remove($user);
        $em->flush();
        return $this->redirectToRoute('home');
    }



}










}